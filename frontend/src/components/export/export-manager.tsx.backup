'use client'

import { useState } from 'react'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { 
  ArrowDownTrayIcon, 
  CheckCircleIcon, 
  ClockIcon,
  ExclamationTriangleIcon,
  TrashIcon,
  DocumentArrowDownIcon,
  SparklesIcon,
  AcademicCapIcon,
  PlayIcon,
  QuestionMarkCircleIcon
} from '@heroicons/react/24/outline'
import { exportApi } from '@/lib/api'
import { formatDistanceToNow } from 'date-fns'
import clsx from 'clsx'
import { DEMO_EXPORT_SCENARIOS, DemoExportScenario } from '@/lib/demo-exports'
import { ExportPreview } from './export-preview'

interface ExportItem {
  export_id: number
  status: string
  frame_count: number
  export_format: string
  file_size?: number
  created_at: string
  completed_at?: string
  error_message?: string
}

export function ExportManager() {
  const [selectedExport, setSelectedExport] = useState<ExportItem | null>(null)
  const [activeTab, setActiveTab] = useState<'exports' | 'demo' | 'tutorial'>('exports')
  const [selectedDemoScenario, setSelectedDemoScenario] = useState<DemoExportScenario | null>(null)
  const [showTutorial, setShowTutorial] = useState(false)

  const queryClient = useQueryClient()

  // Fetch exports
  const { data: exportsData, isLoading } = useQuery({
    queryKey: ['exports'],
    queryFn: () => exportApi.list({ limit: 50 }),
    refetchInterval: 5000 // Refresh every 5 seconds for status updates
  })

  // Download mutation
  const downloadMutation = useMutation({
    mutationFn: exportApi.download,
    onSuccess: () => {
      // Show success message
    }
  })

  // Delete mutation
  const deleteMutation = useMutation({
    mutationFn: exportApi.delete,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['exports'] })
      setSelectedExport(null)
    }
  })

  const formatFileSize = (bytes?: number) => {
    if (!bytes) return 'Unknown'
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]
  }

  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'completed':
        return {
          icon: CheckCircleIcon,
          text: 'Ready',
          color: 'text-green-600 bg-green-50 border-green-200'
        }
      case 'processing':
        return {
          icon: ClockIcon,
          text: 'Processing',
          color: 'text-blue-600 bg-blue-50 border-blue-200'
        }
      case 'failed':
        return {
          icon: ExclamationTriangleIcon,
          text: 'Failed',
          color: 'text-red-600 bg-red-50 border-red-200'
        }
      default:
        return {
          icon: ClockIcon,
          text: 'Pending',
          color: 'text-yellow-600 bg-yellow-50 border-yellow-200'
        }
    }
  }

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[...Array(3)].map((_, i) => (
          <div key={i} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="animate-pulse">
              <div className="flex items-center space-x-4">
                <div className="h-10 w-10 bg-gray-300 rounded-lg"></div>
                <div className="flex-1 space-y-2">
                  <div className="h-4 bg-gray-300 rounded w-1/4"></div>
                  <div className="h-3 bg-gray-300 rounded w-1/2"></div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    )
  }

  const exports = exportsData?.exports || []

  return (
    <div className="space-y-6">
      {/* Enhanced Header with Navigation */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="p-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-xl font-bold text-gray-900">Export Manager</h2>
              <p className="text-sm text-gray-600 mt-1">
                Manage exports, explore demo scenarios, and learn best practices
              </p>
            </div>
            
            <div className="text-sm text-gray-500">
              {exportsData?.total || 0} active exports
            </div>
          </div>

          {/* Tab Navigation */}
          <div className="flex border-b border-gray-200">
            {[
              { id: 'exports', label: 'My Exports', icon: DocumentArrowDownIcon, count: exportsData?.total || 0 },
              { id: 'demo', label: 'Demo Scenarios', icon: SparklesIcon, count: DEMO_EXPORT_SCENARIOS.length },
              { id: 'tutorial', label: 'Tutorial', icon: AcademicCapIcon }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={clsx(
                  'flex items-center space-x-2 px-6 py-3 text-sm font-medium transition-colors border-b-2',
                  activeTab === tab.id
                    ? 'text-indigo-600 border-indigo-600 bg-indigo-50'
                    : 'text-gray-500 border-transparent hover:text-gray-700 hover:bg-gray-50'
                )}
              >
                <tab.icon className="h-4 w-4" />
                <span>{tab.label}</span>
                {tab.count !== undefined && (
                  <span className={clsx(
                    'px-2 py-0.5 rounded-full text-xs font-medium',
                    activeTab === tab.id
                      ? 'bg-indigo-100 text-indigo-600'
                      : 'bg-gray-100 text-gray-600'
                  )}>
                    {tab.count}
                  </span>
                )}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Tab Content */}
      {activeTab === 'exports' && (
        <>
          {exports.length === 0 ? (
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
              <ArrowDownTrayIcon className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Exports Yet</h3>
              <p className="text-gray-600 mb-4">
                Export scenarios from your search results to create downloadable datasets.
              </p>
              <div className="space-y-3">
                <p className="text-sm text-gray-500">
                  Go to Search → Find scenarios → Select frames → Export
                </p>
                <div className="flex justify-center space-x-3">
                  <button
                    onClick={() => setActiveTab('demo')}
                    className="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-lg hover:bg-indigo-700 transition-colors"
                  >
                    Try Demo Scenarios
                  </button>
                  <button
                    onClick={() => setActiveTab('tutorial')}
                    className="px-4 py-2 bg-gray-100 text-gray-700 text-sm font-medium rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Learn How
                  </button>
                </div>
              </div>
            </div>
          ) : (
        <div className="space-y-4">
          {exports.map((exportItem: ExportItem) => {
            const statusInfo = getStatusInfo(exportItem.status)
            const StatusIcon = statusInfo.icon
            const canDownload = exportItem.status === 'completed'
            
            return (
              <div
                key={exportItem.export_id}
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:border-gray-300 transition-colors"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className={clsx(
                      'h-10 w-10 rounded-lg flex items-center justify-center border',
                      statusInfo.color
                    )}>
                      <StatusIcon className="h-5 w-5" />
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <h3 className="text-sm font-medium text-gray-900">
                        Export #{exportItem.export_id}
                      </h3>
                      <div className="flex items-center space-x-4 mt-1">
                        <div className="text-xs text-gray-500">
                          {exportItem.frame_count} frames
                        </div>
                        <div className="text-xs text-gray-500 capitalize">
                          {exportItem.export_format} format
                        </div>
                        {exportItem.file_size && (
                          <div className="text-xs text-gray-500">
                            {formatFileSize(exportItem.file_size)}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center space-x-4">
                    {/* Status */}
                    <div className={clsx(
                      'px-3 py-1 rounded-full text-xs font-medium border',
                      statusInfo.color
                    )}>
                      {statusInfo.text}
                    </div>

                    {/* Actions */}
                    <div className="flex items-center space-x-2">
                      {canDownload && (
                        <button
                          onClick={() => downloadMutation.mutate(exportItem.export_id)}
                          disabled={downloadMutation.isPending}
                          className="p-2 text-blue-600 hover:text-blue-800 rounded-lg hover:bg-blue-50 disabled:opacity-50"
                          title="Download export"
                        >
                          <DocumentArrowDownIcon className="h-4 w-4" />
                        </button>
                      )}
                      
                      <button
                        onClick={() => setSelectedExport(exportItem)}
                        className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100"
                        title="View details"
                      >
                        <ClockIcon className="h-4 w-4" />
                      </button>
                      
                      <button
                        onClick={() => deleteMutation.mutate(exportItem.export_id)}
                        disabled={deleteMutation.isPending}
                        className="p-2 text-red-400 hover:text-red-600 rounded-lg hover:bg-red-50 disabled:opacity-50"
                        title="Delete export"
                      >
                        <TrashIcon className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>

                {/* Additional Info */}
                <div className="mt-4 pt-4 border-t border-gray-100 flex items-center justify-between text-xs text-gray-500">
                  <div className="flex items-center space-x-4">
                    <span>
                      Created {formatDistanceToNow(new Date(exportItem.created_at), { addSuffix: true })}
                    </span>
                    {exportItem.completed_at && (
                      <span>
                        Completed {formatDistanceToNow(new Date(exportItem.completed_at), { addSuffix: true })}
                      </span>
                    )}
                  </div>
                  
                  {exportItem.error_message && (
                    <div className="text-red-600 font-medium">
                      Error: {exportItem.error_message}
                    </div>
                  )}
                </div>

                {/* Download Action for Completed */}
                {canDownload && (
                  <div className="mt-4 pt-4 border-t border-gray-100">
                    <button
                      onClick={() => downloadMutation.mutate(exportItem.export_id)}
                      disabled={downloadMutation.isPending}
                      className="w-full px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center space-x-2"
                    >
                      {downloadMutation.isPending ? (
                        <>
                          <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full" />
                          <span>Downloading...</span>
                        </>
                      ) : (
                        <>
                          <DocumentArrowDownIcon className="h-4 w-4" />
                          <span>Download ({formatFileSize(exportItem.file_size)})</span>
                        </>
                      )}
                    </button>
                  </div>
                )}
              </div>
            )
          })}
        </div>
      )}

      {/* Demo Scenarios Tab */}
      {activeTab === 'demo' && (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-purple-50 to-indigo-50 border border-purple-200 rounded-lg p-6">
            <div className="flex items-center space-x-3 mb-3">
              <SparklesIcon className="h-6 w-6 text-purple-600" />
              <h3 className="text-lg font-semibold text-purple-900">Demo Export Scenarios</h3>
            </div>
            <p className="text-purple-700 text-sm">
              Pre-built datasets showcasing different autonomous vehicle scenarios. Perfect for testing, demonstrations, and learning about export formats.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {DEMO_EXPORT_SCENARIOS.map((scenario) => (
              <div
                key={scenario.id}
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:border-gray-300 transition-colors"
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <h4 className="text-lg font-semibold text-gray-900 mb-2">{scenario.title}</h4>
                    <p className="text-sm text-gray-600 mb-3">{scenario.description}</p>
                    <div className="flex items-center space-x-4 text-xs text-gray-500">
                      <span className="flex items-center space-x-1">
                        <DocumentArrowDownIcon className="h-3 w-3" />
                        <span>{scenario.frame_count} frames</span>
                      </span>
                      <span className="flex items-center space-x-1">
                        <ClockIcon className="h-3 w-3" />
                        <span>{scenario.file_size_mb}MB</span>
                      </span>
                      <span className="capitalize bg-gray-100 px-2 py-1 rounded">
                        {scenario.category.replace('_', ' ')}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="bg-gray-50 p-3 rounded-lg">
                    <h5 className="text-sm font-medium text-gray-900 mb-1">Use Case</h5>
                    <p className="text-xs text-gray-600">{scenario.use_case}</p>
                  </div>

                  <button
                    onClick={() => setSelectedDemoScenario(scenario)}
                    className="w-full px-4 py-2 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition-colors flex items-center justify-center space-x-2"
                  >
                    <SparklesIcon className="h-4 w-4" />
                    <span>Preview & Download</span>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Tutorial Tab */}
      {activeTab === 'tutorial' && (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-6">
            <div className="flex items-center space-x-3 mb-3">
              <AcademicCapIcon className="h-6 w-6 text-green-600" />
              <h3 className="text-lg font-semibold text-green-900">Export Tutorial</h3>
            </div>
            <p className="text-green-700 text-sm">
              Learn how to create, manage, and utilize exports for your autonomous vehicle datasets.
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Step 1 */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
                <span className="text-xl font-bold text-blue-600">1</span>
              </div>
              <h4 className="text-lg font-semibold text-gray-900 mb-2">Search & Select</h4>
              <p className="text-sm text-gray-600 mb-4">
                Use the search interface to find relevant driving scenarios. Select individual frames or use bulk selection for scenarios that match your needs.
              </p>
              <ul className="text-xs text-gray-500 space-y-1">
                <li>• Search with natural language queries</li>
                <li>• Filter by conditions and metadata</li>
                <li>• Preview frames before selection</li>
              </ul>
            </div>

            {/* Step 2 */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
                <span className="text-xl font-bold text-purple-600">2</span>
              </div>
              <h4 className="text-lg font-semibold text-gray-900 mb-2">Choose Format</h4>
              <p className="text-sm text-gray-600 mb-4">
                Select the export format that best fits your use case. Dataset format includes comprehensive metadata for ML workflows.
              </p>
              <ul className="text-xs text-gray-500 space-y-1">
                <li>• <strong>Dataset:</strong> ML-ready with JSON metadata</li>
                <li>• <strong>ZIP:</strong> Simple archive format</li>
                <li>• <strong>CSV:</strong> Spreadsheet-compatible summary</li>
              </ul>
            </div>

            {/* Step 3 */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
                <span className="text-xl font-bold text-green-600">3</span>
              </div>
              <h4 className="text-lg font-semibold text-gray-900 mb-2">Download & Use</h4>
              <p className="text-sm text-gray-600 mb-4">
                Monitor export progress and download when ready. Use the structured data in your ML pipelines or analysis workflows.
              </p>
              <ul className="text-xs text-gray-500 space-y-1">
                <li>• Real-time progress tracking</li>
                <li>• Automatic notifications</li>
                <li>• Ready-to-use data structure</li>
              </ul>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h4 className="text-lg font-semibold text-gray-900 mb-4">Best Practices</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h5 className="font-medium text-gray-900 mb-2">Export Organization</h5>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>• Use consistent naming conventions</li>
                  <li>• Group related scenarios together</li>
                  <li>• Include metadata for reproducibility</li>
                  <li>• Document your selection criteria</li>
                </ul>
              </div>
              <div>
                <h5 className="font-medium text-gray-900 mb-2">Data Management</h5>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>• Regularly clean up old exports</li>
                  <li>• Back up important datasets</li>
                  <li>• Verify data quality before training</li>
                  <li>• Share exports with team members</li>
                </ul>
              </div>
            </div>
          </div>

          <div className="text-center">
            <button
              onClick={() => setActiveTab('demo')}
              className="px-6 py-3 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Try Demo Scenarios
            </button>
          </div>
        </div>
      )}

      {/* Export Details Modal */}
      {selectedExport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  Export Details
                </h3>
                <button
                  onClick={() => setSelectedExport(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ×
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Export Information</h4>
                  <dl className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <dt className="text-gray-500">Export ID</dt>
                      <dd className="font-medium">#{selectedExport.export_id}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-gray-500">Status</dt>
                      <dd className="font-medium capitalize">{selectedExport.status}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-gray-500">Frames</dt>
                      <dd className="font-medium">{selectedExport.frame_count}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-gray-500">Format</dt>
                      <dd className="font-medium uppercase">{selectedExport.export_format}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-gray-500">File Size</dt>
                      <dd className="font-medium">{formatFileSize(selectedExport.file_size)}</dd>
                    </div>
                    <div className="flex justify-between">
                      <dt className="text-gray-500">Created</dt>
                      <dd className="font-medium">
                        {formatDistanceToNow(new Date(selectedExport.created_at), { addSuffix: true })}
                      </dd>
                    </div>
                    {selectedExport.completed_at && (
                      <div className="flex justify-between">
                        <dt className="text-gray-500">Completed</dt>
                        <dd className="font-medium">
                          {formatDistanceToNow(new Date(selectedExport.completed_at), { addSuffix: true })}
                        </dd>
                      </div>
                    )}
                  </dl>
                </div>

                {selectedExport.error_message && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                    <h4 className="text-sm font-medium text-red-900 mb-1">Error Message</h4>
                    <p className="text-sm text-red-700">{selectedExport.error_message}</p>
                  </div>
                )}

                <div className="pt-4 border-t">
                  <div className="flex space-x-3">
                    <button
                      onClick={() => setSelectedExport(null)}
                      className="flex-1 px-4 py-2 text-gray-700 font-medium rounded-lg hover:bg-gray-100"
                    >
                      Close
                    </button>
                    {selectedExport.status === 'completed' && (
                      <button
                        onClick={() => {
                          downloadMutation.mutate(selectedExport.export_id)
                          setSelectedExport(null)
                        }}
                        className="px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700"
                      >
                        Download
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Demo Export Preview Modal */}
      {selectedDemoScenario && (
        <ExportPreview
          scenario={selectedDemoScenario}
          isOpen={!!selectedDemoScenario}
          onClose={() => setSelectedDemoScenario(null)}
          onDownload={(format) => {
            console.log(`Downloaded ${selectedDemoScenario.title} as ${format}`)
          }}
        />
      )}
    </div>
  )
} 