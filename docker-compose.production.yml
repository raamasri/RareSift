version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: raresift-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-raresift}
      POSTGRES_USER: ${POSTGRES_USER:-raresift}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - raresift-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-raresift} -d ${POSTGRES_DB:-raresift}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /run/postgresql
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: raresift-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./monitoring/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - raresift-network
    command: >
      sh -c "
        if [ -n \"${REDIS_PASSWORD}\" ]; then
          redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
        else
          redis-server /usr/local/etc/redis/redis.conf
        fi
      "
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: |
        sh -c "
          if [ -n \"${REDIS_PASSWORD}\" ]; then
            redis-cli -a ${REDIS_PASSWORD} ping
          else
            redis-cli ping
          fi
        "
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # RareSift Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: raresift-backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - uploads_data:/app/uploads
      - ./logs/backend:/app/logs
      - /etc/ssl/certs:/etc/ssl/certs:ro
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-raresift}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-raresift}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY:-}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY:-}
      - API_MASTER_KEY=${API_MASTER_KEY:-}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - RATE_LIMIT_ENABLED=true
      - SECURITY_HEADERS_ENABLED=true
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - S3_BUCKET=${S3_BUCKET:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
    networks:
      - raresift-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/monitoring/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: raresift-celery-worker
    restart: unless-stopped
    volumes:
      - uploads_data:/app/uploads
      - ./logs/celery:/app/logs
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-raresift}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-raresift}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - S3_BUCKET=${S3_BUCKET:-}
    networks:
      - raresift-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "celery", "-A", "app.tasks.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: raresift-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - raresift-network
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "5"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/raresift/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: /opt/raresift/data/redis
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/raresift/data/uploads
  celery_beat_data:
    driver: local

networks:
  raresift-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16