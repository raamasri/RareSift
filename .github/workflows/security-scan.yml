name: Security Scanning

on:
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd frontend
        npm ci

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # Python dependency scanning
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install safety

    - name: Run Safety check on Python dependencies
      run: |
        cd backend
        safety check --json --output safety-report.json || true
        safety check --short-report

    # Node.js dependency scanning
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=high --json > npm-audit-report.json || true
        npm audit --audit-level=high

    # Upload reports
    - name: Upload dependency scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-reports
        path: |
          backend/safety-report.json
          frontend/npm-audit-report.json
        retention-days: 30

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker build -t raresift-backend:security-scan -f backend/Dockerfile.prod backend/
        docker build -t raresift-frontend:security-scan -f frontend/Dockerfile.prod frontend/

    # Trivy container scanning
    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'raresift-backend:security-scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'raresift-frontend:security-scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    # Grype container scanning
    - name: Install Grype
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Scan backend image with Grype
      run: |
        grype raresift-backend:security-scan -o json > grype-backend-report.json
        grype raresift-backend:security-scan

    - name: Scan frontend image with Grype
      run: |
        grype raresift-frontend:security-scan -o json > grype-frontend-report.json
        grype raresift-frontend:security-scan

    - name: Upload container scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-reports
        path: |
          grype-*-report.json
        retention-days: 30

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install TruffleHog
      run: |
        curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.63.2/trufflehog_3.63.2_linux_amd64.tar.gz | tar -xz
        sudo mv trufflehog /usr/local/bin/

    - name: Run TruffleHog
      run: |
        trufflehog git file://. --json > trufflehog-report.json || true
        trufflehog git file://. --only-verified

    - name: Upload secrets scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-scan-reports
        path: |
          trufflehog-report.json
        retention-days: 30

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Checkov for IaC scanning
    - name: Install Checkov
      run: |
        pip install checkov

    - name: Run Checkov scan
      run: |
        checkov -d . --framework dockerfile,docker_compose,secrets --output json --output-file checkov-report.json || true
        checkov -d . --framework dockerfile,docker_compose,secrets

    # Hadolint for Dockerfile linting
    - name: Install Hadolint
      run: |
        wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/

    - name: Run Hadolint on Dockerfiles
      run: |
        find . -name "Dockerfile*" -exec hadolint {} \; || true

    - name: Upload infrastructure scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-scan-reports
        path: |
          checkov-report.json
        retention-days: 30

  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check security configuration files
      run: |
        echo "üîç Checking security configuration files..."
        
        # Check for security headers in nginx config
        if grep -q "X-Frame-Options" nginx/nginx.conf; then
          echo "‚úÖ X-Frame-Options header configured"
        else
          echo "‚ùå X-Frame-Options header missing"
          exit 1
        fi
        
        if grep -q "Content-Security-Policy" nginx/nginx.conf; then
          echo "‚úÖ Content-Security-Policy header configured"
        else
          echo "‚ùå Content-Security-Policy header missing"
          exit 1
        fi
        
        # Check for HTTPS redirect
        if grep -q "return 301 https" nginx/nginx.conf; then
          echo "‚úÖ HTTPS redirect configured"
        else
          echo "‚ùå HTTPS redirect missing"
          exit 1
        fi
        
        # Check for security middleware in backend
        if grep -q "SecurityHeadersMiddleware" backend/app/main.py; then
          echo "‚úÖ Security headers middleware configured"
        else
          echo "‚ùå Security headers middleware missing"
          exit 1
        fi
        
        # Check for rate limiting
        if grep -q "RateLimitMiddleware" backend/app/main.py; then
          echo "‚úÖ Rate limiting configured"
        else
          echo "‚ùå Rate limiting missing"
          exit 1
        fi

    - name: Check Docker security configurations
      run: |
        echo "üîç Checking Docker security configurations..."
        
        # Check for non-root user in Dockerfiles
        if grep -q "USER" backend/Dockerfile.prod; then
          echo "‚úÖ Non-root user configured in backend Dockerfile"
        else
          echo "‚ùå Non-root user missing in backend Dockerfile"
          exit 1
        fi
        
        # Check for read-only filesystems in compose
        if grep -q "read_only: true" docker-compose.production.yml; then
          echo "‚úÖ Read-only filesystems configured"
        else
          echo "‚ùå Read-only filesystems missing"
          exit 1
        fi
        
        # Check for security options
        if grep -q "no-new-privileges" docker-compose.production.yml; then
          echo "‚úÖ No-new-privileges security option configured"
        else
          echo "‚ùå No-new-privileges security option missing"
          exit 1
        fi

    - name: Check secrets management
      run: |
        echo "üîç Checking secrets management..."
        
        # Check for secrets management files
        if [[ -f "backend/app/core/secrets.py" ]]; then
          echo "‚úÖ Secrets management system implemented"
        else
          echo "‚ùå Secrets management system missing"
          exit 1
        fi
        
        # Check that no secrets are hardcoded
        if grep -r "password.*=" backend/ --include="*.py" | grep -v "POSTGRES_PASSWORD" | grep -v "test_password"; then
          echo "‚ùå Potential hardcoded passwords found"
          exit 1
        else
          echo "‚úÖ No hardcoded passwords detected"
        fi

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, container-security-scan, secrets-scan, infrastructure-scan, compliance-check]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security summary
      run: |
        echo "# RareSift Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Container Security: ${{ needs.container-security-scan.result }}" >> security-summary.md
        echo "- Secrets Detection: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-summary.md
        echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        if [[ "${{ needs.codeql-analysis.result }}" == "success" && \
              "${{ needs.dependency-scan.result }}" == "success" && \
              "${{ needs.container-security-scan.result }}" == "success" && \
              "${{ needs.secrets-scan.result }}" == "success" && \
              "${{ needs.infrastructure-scan.result }}" == "success" && \
              "${{ needs.compliance-check.result }}" == "success" ]]; then
          echo "‚úÖ **All security scans passed**" >> security-summary.md
        else
          echo "‚ùå **Some security scans failed - review required**" >> security-summary.md
        fi
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90