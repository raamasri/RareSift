name: RareSift CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: raresift

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    # Python Security Scanning
    - name: Install Python security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan (Python)
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        bandit -r backend/ -f txt
      continue-on-error: true
    
    - name: Check Python dependencies for vulnerabilities
      run: |
        pip install -r backend/requirements.txt
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true
    
    # JavaScript/TypeScript Security Scanning
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate || true
        npm audit --json > ../npm-audit-report.json || true
    
    - name: Run ESLint security scan
      run: |
        cd frontend
        npm run lint -- --format json --output-file ../eslint-report.json || true
        npm run lint
      continue-on-error: true
    
    # Container Security Scanning
    - name: Build Docker images for scanning
      run: |
        docker build -t raresift-backend:scan -f backend/Dockerfile.prod backend/
        docker build -t raresift-frontend:scan -f frontend/Dockerfile.prod frontend/
    
    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'raresift-backend:scan'
        format: 'sarif'
        output: 'trivy-backend.sarif'
    
    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'raresift-frontend:scan'
        format: 'sarif'
        output: 'trivy-frontend.sarif'
    
    # Static Code Analysis
    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/python
          p/typescript
          p/react
          p/docker
          p/secrets
        generateSarif: "1"
      continue-on-error: true
    
    - name: Upload Semgrep SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
    
    - name: Upload Trivy SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-backend.sarif
    
    # Secret Scanning
    - name: Run GitLeaks secret detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Upload security reports as artifacts
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          npm-audit-report.json
          eslint-report.json
          trivy-*.sarif
        retention-days: 30

  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Set up test environment
      run: |
        cd backend
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export REDIS_URL="redis://localhost:6379"
        export SECRET_KEY="test-secret-key-for-ci-testing-only"
        export ENVIRONMENT="testing"
    
    - name: Run database migrations
      run: |
        cd backend
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        python -m alembic upgrade head
    
    - name: Run backend tests
      run: |
        cd backend
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export REDIS_URL="redis://localhost:6379"
        export SECRET_KEY="test-secret-key-for-ci-testing-only"
        export ENVIRONMENT="testing"
        pytest --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results  
        path: |
          backend/coverage.xml
          backend/htmlcov/
        retention-days: 30

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run TypeScript type checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/
        retention-days: 30

  # Build and Test Docker Images
  docker-build:
    name: Build & Test Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        tags: raresift-backend:test
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        tags: raresift-frontend:test
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose stack
      run: |
        # Create test environment file
        cat > .env.test << EOF
        POSTGRES_PASSWORD=test_password
        POSTGRES_USER=test_user
        POSTGRES_DB=test_db
        REDIS_PASSWORD=test_redis_password
        SECRET_KEY=test-secret-key-for-docker-testing-only
        ENVIRONMENT=testing
        LOG_LEVEL=INFO
        CORS_ORIGINS=http://localhost:3000
        ALLOWED_HOSTS=localhost
        EOF
        
        # Start test stack
        docker-compose -f docker-compose.yml up -d --build
        
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:3000 || exit 1
        
        # Stop test stack
        docker-compose -f docker-compose.yml down

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push staging images
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-backend:staging
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could involve SSH to staging server, kubectl commands, etc.
        echo "Staging deployment completed"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push production images
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-backend:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend production image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-frontend:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could involve SSH to production server, kubectl commands, etc.
        echo "Production deployment completed"
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Automated release from main branch
          - Commit: ${{ github.sha }}
          - Security scans passed
          - All tests passed
          - Docker images built and pushed
        draft: false
        prerelease: false

  # Notification Job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ Production deployment successful"
          # Add Slack/email notification here
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "✅ Staging deployment successful"
          # Add Slack/email notification here
        else
          echo "❌ Deployment failed"
          # Add failure notification here
        fi